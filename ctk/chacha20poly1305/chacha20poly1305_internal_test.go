package chacha20poly1305

import (
	"testing"

	"github.com/pmuens/ctk-go/ctk/chacha20"
)

func TestChaCha20Poly1305Poly1305KeyGen(t *testing.T) {
	t.Run("RFC 8439 - Test Vectors - 2.6.2", func(t *testing.T) {
		t.Parallel()

		key := [32]byte{
			0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
			0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
			0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
			0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
		}

		nonce := [12]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
			0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		}

		// The counter has to be set to 0.
		counter := [4]byte{0x00, 0x00, 0x00, 0x00}
		cha := chacha20.NewChaCha20(key, nonce, counter)

		got := poly1305KeyGen(cha)
		want := [32]byte{
			0x8a, 0xd5, 0xa0, 0x8b, 0x90, 0x5f, 0x81, 0xcc, 0x81, 0x50, 0x40, 0x27, 0x4a, 0xb2, 0x94, 0x71,
			0xa8, 0x33, 0xb6, 0x37, 0xe3, 0xfd, 0x0d, 0xa5, 0x08, 0xdb, 0xb8, 0xe2, 0xfd, 0xd1, 0xa6, 0x46,
		}

		if got != want {
			t.Errorf("want %v, got %v", want, got)
		}
	})

	t.Run("RFC 8439 - Test Vectors - A.4 - #1", func(t *testing.T) {
		t.Parallel()

		key := [32]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		}

		nonce := [12]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		}

		// The counter has to be set to 0.
		counter := [4]byte{0x00, 0x00, 0x00, 0x00}
		cha := chacha20.NewChaCha20(key, nonce, counter)

		got := poly1305KeyGen(cha)
		want := [32]byte{
			0x76, 0xb8, 0xe0, 0xad, 0xa0, 0xf1, 0x3d, 0x90, 0x40, 0x5d, 0x6a, 0xe5, 0x53, 0x86, 0xbd, 0x28,
			0xbd, 0xd2, 0x19, 0xb8, 0xa0, 0x8d, 0xed, 0x1a, 0xa8, 0x36, 0xef, 0xcc, 0x8b, 0x77, 0x0d, 0xc7,
		}

		if got != want {
			t.Errorf("want %v, got %v", want, got)
		}
	})

	t.Run("RFC 8439 - Test Vectors - A.4 - #2", func(t *testing.T) {
		t.Parallel()

		key := [32]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		}

		nonce := [12]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
		}

		// The counter has to be set to 0.
		counter := [4]byte{0x00, 0x00, 0x00, 0x00}
		cha := chacha20.NewChaCha20(key, nonce, counter)

		got := poly1305KeyGen(cha)
		want := [32]byte{
			0xec, 0xfa, 0x25, 0x4f, 0x84, 0x5f, 0x64, 0x74, 0x73, 0xd3, 0xcb, 0x14, 0x0d, 0xa9, 0xe8, 0x76,
			0x06, 0xcb, 0x33, 0x06, 0x6c, 0x44, 0x7b, 0x87, 0xbc, 0x26, 0x66, 0xdd, 0xe3, 0xfb, 0xb7, 0x39,
		}

		if got != want {
			t.Errorf("want %v, got %v", want, got)
		}
	})

	t.Run("RFC 8439 - Test Vectors - A.4 - #3", func(t *testing.T) {
		t.Parallel()

		key := [32]byte{
			0x1c, 0x92, 0x40, 0xa5, 0xeb, 0x55, 0xd3, 0x8a,
			0xf3, 0x33, 0x88, 0x86, 0x04, 0xf6, 0xb5, 0xf0,
			0x47, 0x39, 0x17, 0xc1, 0x40, 0x2b, 0x80, 0x09,
			0x9d, 0xca, 0x5c, 0xbc, 0x20, 0x70, 0x75, 0xc0,
		}

		nonce := [12]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
		}

		// The counter has to be set to 0.
		counter := [4]byte{0x00, 0x00, 0x00, 0x00}
		cha := chacha20.NewChaCha20(key, nonce, counter)

		got := poly1305KeyGen(cha)
		want := [32]byte{
			0x96, 0x5e, 0x3b, 0xc6, 0xf9, 0xec, 0x7e, 0xd9, 0x56, 0x08, 0x08, 0xf4, 0xd2, 0x29, 0xf9, 0x4b,
			0x13, 0x7f, 0xf2, 0x75, 0xca, 0x9b, 0x3f, 0xcb, 0xdd, 0x59, 0xde, 0xaa, 0xd2, 0x33, 0x10, 0xae,
		}

		if got != want {
			t.Errorf("want %v, got %v", want, got)
		}
	})
}
